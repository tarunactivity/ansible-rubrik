# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class GlobalBlobstoreConfig(Model):
    """GlobalBlobstoreConfig.

    :param backup_metadata_during_gc_release_lock: This is set to true for
     unit tests
    :type backup_metadata_during_gc_release_lock: bool
    :param backup_metadata_during_blob_store_open: This is set to true for
     unit tests
    :type backup_metadata_during_blob_store_open: bool
    :param backup_metadata_during_blob_store_close: This is set to true for
     unit tests
    :type backup_metadata_during_blob_store_close: bool
    :param consolidate_job_frequency_in_minutes: Interval for consolidate jobs
     in minutes
    :type consolidate_job_frequency_in_minutes: int
    :param cross_job_frequency_in_minutes: Interval for cross increment jobs
     in minutes
    :type cross_job_frequency_in_minutes: int
    :param gc_deletion_group_size: Number of blobs to delete at a time so gc
     can make incremental progress
    :type gc_deletion_group_size: int
    :param reverse_min_change_rate: Minimum change rate to run reverse
    :type reverse_min_change_rate: int
    :param reverse_min_number_of_disks: Minimum number of snapshots required
     to run reverse This is a knob that can be useful to force a reverse in the
     field but in general we do not want reverse operations to happen if it is
     not absolutely needed and hence setting this to a very high value in
     production.
    :type reverse_min_number_of_disks: int
    :param reverse_job_frequency_in_minutes: Maximum number of concurrent
     reverse jobs per node
    :type reverse_job_frequency_in_minutes: int
    :param reverse_job_in_memory_sem_shares: Maximum number of concurrent
     reverse jobs per node
    :type reverse_job_in_memory_sem_shares: int
    :param blob_store_metadata_backup_window_size: The number of metadata
     backup files to keep.
    :type blob_store_metadata_backup_window_size: int
    :param enable_local_sdfs_blob_store_metadata_backup: Determines whether
     metadata should be backed up in sdfs when blob store is operating on blobs
     in the local cluster.
    :type enable_local_sdfs_blob_store_metadata_backup: bool
    :param enable_blob_store_heavy_weight_checks: Whether to enable
     heavy-weight tests in blob store
    :type enable_blob_store_heavy_weight_checks: bool
    :param similarity_threshold_for_cross: Threshold of similarity required to
     choose a cross base while deduping a full snapshot.
    :type similarity_threshold_for_cross: float
    :param max_num_cross_refs_soft_cap: DiffChainBlobStore's soft cap on the
     number of crosses to permit that are based on a single base. The cap is
     soft in the sense that we do a precheck and exclude candidate bases with
     more cross refs prior to choosing a cross base, but do not enforce
     anything after the fact. There could be races that allow the number to
     exceed this cap, and if the cap is lowered, we will not enter a failure
     loop.
    :type max_num_cross_refs_soft_cap: int
    :param sim_hash_cache_file_refresh_frequency_seconds: Period of the global
     job to rebuild the in sim hash cache file.
    :type sim_hash_cache_file_refresh_frequency_seconds: int
    :param sim_hash_cache_staleness_threshold_millis: Threshold to reload the
     in memory sim hash cache from the cached file. A value of 0 implies we
     always reload, assuming time is monotonic.
    :type sim_hash_cache_staleness_threshold_millis: int
    :param max_blobs_to_gc_per_job: Maximum number of blobs to be GCed per job
     run
    :type max_blobs_to_gc_per_job: int
    """

    _attribute_map = {
        'backup_metadata_during_gc_release_lock': {'key': 'backupMetadataDuringGcReleaseLock', 'type': 'bool'},
        'backup_metadata_during_blob_store_open': {'key': 'backupMetadataDuringBlobStoreOpen', 'type': 'bool'},
        'backup_metadata_during_blob_store_close': {'key': 'backupMetadataDuringBlobStoreClose', 'type': 'bool'},
        'consolidate_job_frequency_in_minutes': {'key': 'consolidateJobFrequencyInMinutes', 'type': 'int'},
        'cross_job_frequency_in_minutes': {'key': 'crossJobFrequencyInMinutes', 'type': 'int'},
        'gc_deletion_group_size': {'key': 'gcDeletionGroupSize', 'type': 'int'},
        'reverse_min_change_rate': {'key': 'reverseMinChangeRate', 'type': 'int'},
        'reverse_min_number_of_disks': {'key': 'reverseMinNumberOfDisks', 'type': 'int'},
        'reverse_job_frequency_in_minutes': {'key': 'reverseJobFrequencyInMinutes', 'type': 'int'},
        'reverse_job_in_memory_sem_shares': {'key': 'reverseJobInMemorySemShares', 'type': 'int'},
        'blob_store_metadata_backup_window_size': {'key': 'blobStoreMetadataBackupWindowSize', 'type': 'int'},
        'enable_local_sdfs_blob_store_metadata_backup': {'key': 'enableLocalSdfsBlobStoreMetadataBackup', 'type': 'bool'},
        'enable_blob_store_heavy_weight_checks': {'key': 'enableBlobStoreHeavyWeightChecks', 'type': 'bool'},
        'similarity_threshold_for_cross': {'key': 'similarityThresholdForCross', 'type': 'float'},
        'max_num_cross_refs_soft_cap': {'key': 'maxNumCrossRefsSoftCap', 'type': 'int'},
        'sim_hash_cache_file_refresh_frequency_seconds': {'key': 'simHashCacheFileRefreshFrequencySeconds', 'type': 'int'},
        'sim_hash_cache_staleness_threshold_millis': {'key': 'simHashCacheStalenessThresholdMillis', 'type': 'int'},
        'max_blobs_to_gc_per_job': {'key': 'maxBlobsToGcPerJob', 'type': 'int'},
    }

    def __init__(self, backup_metadata_during_gc_release_lock=None, backup_metadata_during_blob_store_open=None, backup_metadata_during_blob_store_close=None, consolidate_job_frequency_in_minutes=None, cross_job_frequency_in_minutes=None, gc_deletion_group_size=None, reverse_min_change_rate=None, reverse_min_number_of_disks=None, reverse_job_frequency_in_minutes=None, reverse_job_in_memory_sem_shares=None, blob_store_metadata_backup_window_size=None, enable_local_sdfs_blob_store_metadata_backup=None, enable_blob_store_heavy_weight_checks=None, similarity_threshold_for_cross=None, max_num_cross_refs_soft_cap=None, sim_hash_cache_file_refresh_frequency_seconds=None, sim_hash_cache_staleness_threshold_millis=None, max_blobs_to_gc_per_job=None):
        self.backup_metadata_during_gc_release_lock = backup_metadata_during_gc_release_lock
        self.backup_metadata_during_blob_store_open = backup_metadata_during_blob_store_open
        self.backup_metadata_during_blob_store_close = backup_metadata_during_blob_store_close
        self.consolidate_job_frequency_in_minutes = consolidate_job_frequency_in_minutes
        self.cross_job_frequency_in_minutes = cross_job_frequency_in_minutes
        self.gc_deletion_group_size = gc_deletion_group_size
        self.reverse_min_change_rate = reverse_min_change_rate
        self.reverse_min_number_of_disks = reverse_min_number_of_disks
        self.reverse_job_frequency_in_minutes = reverse_job_frequency_in_minutes
        self.reverse_job_in_memory_sem_shares = reverse_job_in_memory_sem_shares
        self.blob_store_metadata_backup_window_size = blob_store_metadata_backup_window_size
        self.enable_local_sdfs_blob_store_metadata_backup = enable_local_sdfs_blob_store_metadata_backup
        self.enable_blob_store_heavy_weight_checks = enable_blob_store_heavy_weight_checks
        self.similarity_threshold_for_cross = similarity_threshold_for_cross
        self.max_num_cross_refs_soft_cap = max_num_cross_refs_soft_cap
        self.sim_hash_cache_file_refresh_frequency_seconds = sim_hash_cache_file_refresh_frequency_seconds
        self.sim_hash_cache_staleness_threshold_millis = sim_hash_cache_staleness_threshold_millis
        self.max_blobs_to_gc_per_job = max_blobs_to_gc_per_job
