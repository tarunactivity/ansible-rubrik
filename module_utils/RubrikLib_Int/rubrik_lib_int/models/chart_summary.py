# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ChartSummary(Model):
    """ChartSummary.

    :param id: ID of the chart.
    :type id: str
    :param name: Name of the chart.
    :type name: str
    :param chart_type: Type of the chart. Possible values include: 'Donut',
     'VerticalBar', 'HorizontalBar', 'Line', 'StackedVerticalBar',
     'StackedHorizontalBar'
    :type chart_type: str or :class:`enum <rubriklib_int.models.enum>`
    :param attribute: Attribute for the chart. Possible values include:
     'TaskStatus', 'Hour', 'Day', 'Month', 'Quarter', 'Year', 'SlaDomain',
     'ObjectType', 'Location', 'ObjectName', 'ClusterLocation', 'TaskType',
     'ComplianceStatus'
    :type attribute: str or :class:`enum <rubriklib_int.models.enum>`
    :param measure: Measure for the chart. Possible values include:
     'NumberOfTasks', 'SuccessfulTaskCount', 'FailedTaskCount',
     'CanceledTaskCount', 'RunningTaskCount', 'AverageDuration',
     'DataTransferred', 'LogicalDataProtected', 'DataStored', 'DedupRatio',
     'LogicalDedupRatio', 'DataReductionPercent',
     'LogicalDataReductionPercent', 'TotalLocalStorage', 'TotalReplicaStorage',
     'TotalArchiveStorage', 'LocalStorageGrowth', 'ArchiveStorageGrowth',
     'ReplicaStorageGrowth', 'ComplianceStatusCount', 'InComplianceCount',
     'NonComplianceCount', 'StackedTaskCountByStatus', 'StackedTotalData',
     'StackedComplianceCountByStatus'
    :type measure: str or :class:`enum <rubriklib_int.models.enum>`
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'chart_type': {'required': True},
        'attribute': {'required': True},
        'measure': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'chart_type': {'key': 'chartType', 'type': 'str'},
        'attribute': {'key': 'attribute', 'type': 'str'},
        'measure': {'key': 'measure', 'type': 'str'},
    }

    def __init__(self, id, name, chart_type, attribute, measure):
        self.id = id
        self.name = name
        self.chart_type = chart_type
        self.attribute = attribute
        self.measure = measure
