# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .nutanix_cluster_summary import NutanixClusterSummary


class NutanixClusterDetail(NutanixClusterSummary):
    """NutanixClusterDetail.

    :param id:
    :type id: str
    :param name:
    :type name: str
    :param configured_sla_domain_id: ID of the configured SLA domain
    :type configured_sla_domain_id: str
    :param configured_sla_domain_name: name of the configured SLA domain
    :type configured_sla_domain_name: str
    :param primary_cluster_id:
    :type primary_cluster_id: str
    :param natural_id:
    :type natural_id: str
    :param hostname:
    :type hostname: str
    :param username:
    :type username: str
    :param status: Status of a Nutanix cluster. Possible values are
     "Disconnected" (no communication possible with Nutanix Cluster),
     "Refreshing" (communication with Cluster but has not refreshed yet),
     "Connected" (refreshed the metadata for the Nutanix Cluster object), and
     "Deleting" (removing the Nutanix Cluster object). Possible values include:
     'Disconnected', 'Refreshing', 'Connected', 'Deleting'
    :type status: str or :class:`enum <rubriklib_int.models.enum>`
    :param ca_certs: Concatenated X.509 certificates in Base64 encoded DER
     format. Each certificate must start with -----BEGIN CERTIFICATE----- and
     end with -----END CERTIFICATE-----.
    :type ca_certs: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'configured_sla_domain_id': {'required': True},
        'configured_sla_domain_name': {'required': True},
        'primary_cluster_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'configured_sla_domain_id': {'key': 'configuredSlaDomainId', 'type': 'str'},
        'configured_sla_domain_name': {'key': 'configuredSlaDomainName', 'type': 'str'},
        'primary_cluster_id': {'key': 'primaryClusterId', 'type': 'str'},
        'natural_id': {'key': 'naturalId', 'type': 'str'},
        'hostname': {'key': 'hostname', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'ca_certs': {'key': 'caCerts', 'type': 'str'},
    }

    def __init__(self, id, name, configured_sla_domain_id, configured_sla_domain_name, primary_cluster_id, natural_id=None, hostname=None, username=None, status=None, ca_certs=None):
        super(NutanixClusterDetail, self).__init__(id=id, name=name, configured_sla_domain_id=configured_sla_domain_id, configured_sla_domain_name=configured_sla_domain_name, primary_cluster_id=primary_cluster_id, natural_id=natural_id, hostname=hostname, username=username, status=status)
        self.ca_certs = ca_certs
