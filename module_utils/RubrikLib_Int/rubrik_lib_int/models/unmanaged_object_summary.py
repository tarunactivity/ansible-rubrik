# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class UnmanagedObjectSummary(Model):
    """UnmanagedObjectSummary.

    :param id:
    :type id: str
    :param name:
    :type name: str
    :param object_type: The type of the unmanaged object. This may be
     VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset,
     or NutanixVirtualMachine. Possible values include: 'VirtualMachine',
     'MssqlDatabase', 'LinuxFileset', 'WindowsFileset', 'ShareFileset',
     'NutanixVirtualMachine'
    :type object_type: str or :class:`enum <rubriklib_int.models.enum>`
    :param physical_location: Brief info of all the objects in the physical
     path to this Object
    :type physical_location: list of :class:`LocationPathPoint
     <rubriklib_int.models.LocationPathPoint>`
    :param unmanaged_status: Unmanaged Status of this object. Protected means
     that this object is still protected by an SLA Policy. Unprotected means
     that this object has become unprotected. Relic means that Rubrik has lost
     contact with this object. Possible values include: 'Protected', 'Relic',
     'Unprotected'
    :type unmanaged_status: str or :class:`enum <rubriklib_int.models.enum>`
    :param unmanaged_snapshot_count: Number of unmanaged snapshots of this
     object.
    :type unmanaged_snapshot_count: long
    :param local_storage: Storage being taken up on the local cluster by
     unmanaged snapshots.
    :type local_storage: long
    :param archive_storage: Storage being taken up in the archival location by
     unmanaged snapshots.
    :type archive_storage: long
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'object_type': {'required': True},
        'physical_location': {'required': True},
        'unmanaged_status': {'required': True},
        'unmanaged_snapshot_count': {'required': True},
        'local_storage': {'required': True},
        'archive_storage': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'physical_location': {'key': 'physicalLocation', 'type': '[LocationPathPoint]'},
        'unmanaged_status': {'key': 'unmanagedStatus', 'type': 'str'},
        'unmanaged_snapshot_count': {'key': 'unmanagedSnapshotCount', 'type': 'long'},
        'local_storage': {'key': 'localStorage', 'type': 'long'},
        'archive_storage': {'key': 'archiveStorage', 'type': 'long'},
    }

    def __init__(self, id, name, object_type, physical_location, unmanaged_status, unmanaged_snapshot_count, local_storage, archive_storage):
        self.id = id
        self.name = name
        self.object_type = object_type
        self.physical_location = physical_location
        self.unmanaged_status = unmanaged_status
        self.unmanaged_snapshot_count = unmanaged_snapshot_count
        self.local_storage = local_storage
        self.archive_storage = archive_storage
