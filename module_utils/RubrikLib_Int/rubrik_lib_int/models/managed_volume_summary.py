# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .snappable import Snappable


class ManagedVolumeSummary(Snappable):
    """ManagedVolumeSummary.

    :param id:
    :type id: str
    :param name:
    :type name: str
    :param configured_sla_domain_id: ID of the configured SLA domain
    :type configured_sla_domain_id: str
    :param configured_sla_domain_name: name of the configured SLA domain
    :type configured_sla_domain_name: str
    :param primary_cluster_id:
    :type primary_cluster_id: str
    :param sla_assignment: SLA assignment type. Possible values include:
     'Derived', 'Direct', 'Unassigned'
    :type sla_assignment: str or :class:`enum <rubriklib_int.models.enum>`
    :param effective_sla_domain_id: ID of the effective SLA domain
    :type effective_sla_domain_id: str
    :param effective_sla_domain_name: name of the effective SLA domain
    :type effective_sla_domain_name: str
    :param effective_sla_source_object_id: ID of the object from which the
     effective SLA domain is inherited
    :type effective_sla_source_object_id: str
    :param effective_sla_source_object_name: Name of the object from which the
     effective SLA domain is inherited
    :type effective_sla_source_object_name: str
    :param snapshot_count: Number of snapshots.
    :type snapshot_count: int
    :param is_relic: Is managed volume a relic.
    :type is_relic: bool
    :param num_channels: Number of channels to divide the volume into. Each
     channel provides a unique share to write to.
    :type num_channels: int
    :param volume_size: Maximum capacity for the volume across all the
     channels in bytes.
    :type volume_size: long
    :param used_size: Used capacity for the volume across all the channels in
     bytes.
    :type used_size: long
    :param host_patterns: List of host patterns. A host pattern describes a
     set of hosts who can mount the host. It can either be a host name, a
     network in CIDR notation or hostnames matching wildcards * or ?
    :type host_patterns: list of str
    :param main_export:
    :type main_export: :class:`ManagedVolumeExport
     <rubriklib_int.models.ManagedVolumeExport>`
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'configured_sla_domain_id': {'required': True},
        'configured_sla_domain_name': {'required': True},
        'primary_cluster_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'configured_sla_domain_id': {'key': 'configuredSlaDomainId', 'type': 'str'},
        'configured_sla_domain_name': {'key': 'configuredSlaDomainName', 'type': 'str'},
        'primary_cluster_id': {'key': 'primaryClusterId', 'type': 'str'},
        'sla_assignment': {'key': 'slaAssignment', 'type': 'str'},
        'effective_sla_domain_id': {'key': 'effectiveSlaDomainId', 'type': 'str'},
        'effective_sla_domain_name': {'key': 'effectiveSlaDomainName', 'type': 'str'},
        'effective_sla_source_object_id': {'key': 'effectiveSlaSourceObjectId', 'type': 'str'},
        'effective_sla_source_object_name': {'key': 'effectiveSlaSourceObjectName', 'type': 'str'},
        'snapshot_count': {'key': 'snapshotCount', 'type': 'int'},
        'is_relic': {'key': 'isRelic', 'type': 'bool'},
        'num_channels': {'key': 'numChannels', 'type': 'int'},
        'volume_size': {'key': 'volumeSize', 'type': 'long'},
        'used_size': {'key': 'usedSize', 'type': 'long'},
        'host_patterns': {'key': 'hostPatterns', 'type': '[str]'},
        'main_export': {'key': 'mainExport', 'type': 'ManagedVolumeExport'},
    }

    def __init__(self, id, name, configured_sla_domain_id, configured_sla_domain_name, primary_cluster_id, sla_assignment=None, effective_sla_domain_id=None, effective_sla_domain_name=None, effective_sla_source_object_id=None, effective_sla_source_object_name=None, snapshot_count=None, is_relic=None, num_channels=None, volume_size=None, used_size=None, host_patterns=None, main_export=None):
        super(ManagedVolumeSummary, self).__init__(id=id, name=name, configured_sla_domain_id=configured_sla_domain_id, configured_sla_domain_name=configured_sla_domain_name, primary_cluster_id=primary_cluster_id, sla_assignment=sla_assignment, effective_sla_domain_id=effective_sla_domain_id, effective_sla_domain_name=effective_sla_domain_name, effective_sla_source_object_id=effective_sla_source_object_id, effective_sla_source_object_name=effective_sla_source_object_name)
        self.snapshot_count = snapshot_count
        self.is_relic = is_relic
        self.num_channels = num_channels
        self.volume_size = volume_size
        self.used_size = used_size
        self.host_patterns = host_patterns
        self.main_export = main_export
