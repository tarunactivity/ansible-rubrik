# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VcenterConfig(Model):
    """VcenterConfig.

    :param hostname:
    :type hostname: str
    :param username:
    :type username: str
    :param password:
    :type password: str
    :param conflict_resolution_authz: Set to 'AllowAutoConflictResolution' to
     link the relic virtual machine objects of a virtual machine to the current
     object for the virtual machine or to 'NoConflictResolution' to prevent
     linking. The Rubrik cluster generates a unique ID for each virtual machine
     when a vCenter Server is added. When a virtual machine changes to another
     vCenter Server or unregisters and registers with the same vCenter Server,
     a new unique ID is generated for that virtual machine. When this happens,
     the virtual machine object associated with the original ID becomes a
     relic. This option links relic virtual machine objects with the current
     virtual machine object of a specific virtual machine, and makes the
     collective snapshot history available through the current object. Default
     value is 'NoConflictResolution'. Possible values include:
     'AllowAutoConflictResolution', 'NoConflictResolution'
    :type conflict_resolution_authz: str or :class:`enum
     <rubriklib.models.enum>`
    :param ca_certs: Concatenated X.509 certificates in Base64 encoded DER
     format. Each certificate must start with -----BEGIN CERTIFICATE----- and
     end with -----END CERTIFICATE-----.
    :type ca_certs: str
    """

    _validation = {
        'hostname': {'required': True},
        'username': {'required': True},
        'password': {'required': True},
    }

    _attribute_map = {
        'hostname': {'key': 'hostname', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'conflict_resolution_authz': {'key': 'conflictResolutionAuthz', 'type': 'str'},
        'ca_certs': {'key': 'caCerts', 'type': 'str'},
    }

    def __init__(self, hostname, username, password, conflict_resolution_authz=None, ca_certs=None):
        self.hostname = hostname
        self.username = username
        self.password = password
        self.conflict_resolution_authz = conflict_resolution_authz
        self.ca_certs = ca_certs
