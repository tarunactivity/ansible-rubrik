# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .vcenter_summary import VcenterSummary


class VcenterDetail(VcenterSummary):
    """VcenterDetail.

    :param ca_certs: Concatenated X.509 certificates in Base64 encoded DER
     format. Each certificate must start with -----BEGIN CERTIFICATE----- and
     end with -----END CERTIFICATE-----. Use an empty string to remove the
     existing certificates for the vCenter.
    :type ca_certs: str
    :param configured_sla_domain_id: ID of the SLA Domain that is configured
     for this vCenter Server.
    :type configured_sla_domain_id: str
    :param id:
    :type id: str
    :param name:
    :type name: str
    :param configured_sla_domain_name: name of the configured SLA domain
    :type configured_sla_domain_name: str
    :param primary_cluster_id:
    :type primary_cluster_id: str
    :param hostname:
    :type hostname: str
    :param username:
    :type username: str
    :param conflict_resolution_authz: Set to 'AllowAutoConflictResolution' to
     link the relic virtual machine objects of a virtual machine to the current
     object for the virtual machine or to 'NoConflictResolution' to prevent
     linking. The Rubrik cluster generates a unique ID for each virtual machine
     when a vCenter Server is added. When a virtual machine changes to another
     vCenter Server or unregisters and registers with the same vCenter Server,
     a new unique ID is generated for that virtual machine. When this happens,
     the virtual machine object associated with the original ID becomes a
     relic. This option links relic virtual machine objects with the current
     virtual machine object of a specific virtual machine, and makes the
     collective snapshot history available through the current object. Default
     value is 'NoConflictResolution'. Possible values include:
     'AllowAutoConflictResolution', 'NoConflictResolution'
    :type conflict_resolution_authz: str or :class:`enum
     <rubriklib.models.enum>`
    :param status: Status of a vCenter Server. Possible values are
     "Disconnected" (no communication possible with vCenter Server),
     "Refreshing" (communication with vCenter Server but has not refreshed
     yet), "Connected" (refreshed the metadata for the vCenter Server object),
     and "Deleting" (removing the vCenter Server object).
    :type status: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'configured_sla_domain_name': {'required': True},
        'primary_cluster_id': {'required': True},
    }

    _attribute_map = {
        'ca_certs': {'key': 'caCerts', 'type': 'str'},
        'configured_sla_domain_id': {'key': 'configuredSlaDomainId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'configured_sla_domain_name': {'key': 'configuredSlaDomainName', 'type': 'str'},
        'primary_cluster_id': {'key': 'primaryClusterId', 'type': 'str'},
        'hostname': {'key': 'hostname', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'conflict_resolution_authz': {'key': 'conflictResolutionAuthz', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, id, name, configured_sla_domain_name, primary_cluster_id, ca_certs=None, configured_sla_domain_id=None, hostname=None, username=None, conflict_resolution_authz=None, status=None):
        super(VcenterDetail, self).__init__(ca_certs=ca_certs, configured_sla_domain_id=configured_sla_domain_id, id=id, name=name, configured_sla_domain_name=configured_sla_domain_name, primary_cluster_id=primary_cluster_id, hostname=hostname, username=username, conflict_resolution_authz=conflict_resolution_authz)
        self.status = status
