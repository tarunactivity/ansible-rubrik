# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VirtualMachineUpdate(Model):
    """VirtualMachineUpdate.

    :param max_nested_vsphere_snapshots:
    :type max_nested_vsphere_snapshots: int
    :param is_vm_paused: Whether to pause or resume backups/archival for this
     VM
    :type is_vm_paused: bool
    :param configured_sla_domain_id: Assign this VM to the given SLA domain.
    :type configured_sla_domain_id: str
    :param snapshot_consistency_mandate: Consistency level mandated for this
     VM or empty string for none. Possible values include: 'UNKNOWN',
     'INCONSISTENT', 'CRASH_CONSISTENT', 'FILE_SYSTEM_CONSISTENT',
     'VSS_CONSISTENT', 'APP_CONSISTENT'
    :type snapshot_consistency_mandate: str or :class:`enum
     <rubriklib.models.enum>`
    :param pre_backup_script:
    :type pre_backup_script: :class:`VirtualMachineScriptDetail
     <rubriklib.models.VirtualMachineScriptDetail>`
    :param post_snap_script:
    :type post_snap_script: :class:`VirtualMachineScriptDetail
     <rubriklib.models.VirtualMachineScriptDetail>`
    :param post_backup_script:
    :type post_backup_script: :class:`VirtualMachineScriptDetail
     <rubriklib.models.VirtualMachineScriptDetail>`
    :param is_array_integration_enabled: User setting to dictate whether to
     use storage array snaphots for ingest. This setting only makes sense for
     VMs where array based ingest is possible.
    :type is_array_integration_enabled: bool
    :param cloud_instantiation_spec: Cloud instantiation specification for the
     selected virtual machine.
    :type cloud_instantiation_spec: :class:`CloudInstantiationSpec
     <rubriklib.models.CloudInstantiationSpec>`
    """

    _attribute_map = {
        'max_nested_vsphere_snapshots': {'key': 'maxNestedVsphereSnapshots', 'type': 'int'},
        'is_vm_paused': {'key': 'isVmPaused', 'type': 'bool'},
        'configured_sla_domain_id': {'key': 'configuredSlaDomainId', 'type': 'str'},
        'snapshot_consistency_mandate': {'key': 'snapshotConsistencyMandate', 'type': 'str'},
        'pre_backup_script': {'key': 'preBackupScript', 'type': 'VirtualMachineScriptDetail'},
        'post_snap_script': {'key': 'postSnapScript', 'type': 'VirtualMachineScriptDetail'},
        'post_backup_script': {'key': 'postBackupScript', 'type': 'VirtualMachineScriptDetail'},
        'is_array_integration_enabled': {'key': 'isArrayIntegrationEnabled', 'type': 'bool'},
        'cloud_instantiation_spec': {'key': 'cloudInstantiationSpec', 'type': 'CloudInstantiationSpec'},
    }

    def __init__(self, max_nested_vsphere_snapshots=None, is_vm_paused=None, configured_sla_domain_id=None, snapshot_consistency_mandate=None, pre_backup_script=None, post_snap_script=None, post_backup_script=None, is_array_integration_enabled=None, cloud_instantiation_spec=None):
        self.max_nested_vsphere_snapshots = max_nested_vsphere_snapshots
        self.is_vm_paused = is_vm_paused
        self.configured_sla_domain_id = configured_sla_domain_id
        self.snapshot_consistency_mandate = snapshot_consistency_mandate
        self.pre_backup_script = pre_backup_script
        self.post_snap_script = post_snap_script
        self.post_backup_script = post_backup_script
        self.is_array_integration_enabled = is_array_integration_enabled
        self.cloud_instantiation_spec = cloud_instantiation_spec
