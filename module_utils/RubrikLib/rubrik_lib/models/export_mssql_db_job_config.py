# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ExportMssqlDbJobConfig(Model):
    """ExportMssqlDbJobConfig.

    :param recovery_point:
    :type recovery_point: :class:`MssqlRecoveryPoint
     <rubriklib.models.MssqlRecoveryPoint>`
    :param target_instance_id: ID of the Microsoft SQL instance for the new
     database.
    :type target_instance_id: str
    :param target_database_name: Name of the new database.
    :type target_database_name: str
    :param target_data_file_path: The target path to store all data files.
    :type target_data_file_path: str
    :param target_log_file_path: The target path to store all log files.
    :type target_log_file_path: str
    :param target_file_paths: One target path for each individual database
     file. Overrides targetDataFilePath and targetLogFilePath.
    :type target_file_paths: list of :class:`MssqlDbFileExportPath
     <rubriklib.models.MssqlDbFileExportPath>`
    :param finish_recovery: Whether to leave the database in recovering mode
     at the end of the export operation.
    :type finish_recovery: bool
    :param max_data_streams: Maximum number of parallel data streams that can
     be used to copy data to the target system
    :type max_data_streams: int
    """

    _validation = {
        'recovery_point': {'required': True},
        'target_instance_id': {'required': True},
        'target_database_name': {'required': True},
    }

    _attribute_map = {
        'recovery_point': {'key': 'recoveryPoint', 'type': 'MssqlRecoveryPoint'},
        'target_instance_id': {'key': 'targetInstanceId', 'type': 'str'},
        'target_database_name': {'key': 'targetDatabaseName', 'type': 'str'},
        'target_data_file_path': {'key': 'targetDataFilePath', 'type': 'str'},
        'target_log_file_path': {'key': 'targetLogFilePath', 'type': 'str'},
        'target_file_paths': {'key': 'targetFilePaths', 'type': '[MssqlDbFileExportPath]'},
        'finish_recovery': {'key': 'finishRecovery', 'type': 'bool'},
        'max_data_streams': {'key': 'maxDataStreams', 'type': 'int'},
    }

    def __init__(self, recovery_point, target_instance_id, target_database_name, target_data_file_path=None, target_log_file_path=None, target_file_paths=None, finish_recovery=None, max_data_streams=None):
        self.recovery_point = recovery_point
        self.target_instance_id = target_instance_id
        self.target_database_name = target_database_name
        self.target_data_file_path = target_data_file_path
        self.target_log_file_path = target_log_file_path
        self.target_file_paths = target_file_paths
        self.finish_recovery = finish_recovery
        self.max_data_streams = max_data_streams
